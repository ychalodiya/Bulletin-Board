{"version":3,"sources":["Note.js","board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","save","renderForm","renderDisplay","randomBetween","style","right","window","innerWidth","top","innerHeight","transform","concat","x","y","s","Math","ceil","random","textArea","_newText","focus","select","nextProps","nextState","children","setState","onRemove","index","e","preventDefault","onChange","value","_this2","react_default","a","createElement","className","onSubmit","ref","input","autofocus","defaultValue","id","onClick","fa","Component","Board","notes","eachNote","update","add","nextId","self","count","fetch","then","response","json","split","forEach","sentence","substring","text","prevState","toConsumableArray","note","uniqueId","newText","i","console","log","map","objectSpread","filter","src_Note","key","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","board","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.657547f7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { FaPen } from 'react-icons/fa'\nimport { FaTrash } from 'react-icons/fa'\nimport { FaFile } from 'react-icons/fa'\n\nclass Note extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            editing: false\n        }\n        this.edit = this.edit.bind(this)\n        this.remove = this.remove.bind(this)\n        this.save = this.save.bind(this)\n\n        this.renderForm = this.renderForm.bind(this)\n        this.renderDisplay = this.renderDisplay.bind(this)\n        this.randomBetween = this.randomBetween.bind(this)\n\n    }\n    componentWillMount() {\n        this.style = {\n            right: this.randomBetween(0, window.innerWidth - 150, 'px'),\n            top: this.randomBetween(0, window.innerHeight - 150, 'px'),\n            transform: `rotate(${this.randomBetween(-25, 25, 'deg')})`\n        }\n    }\n\n    randomBetween(x, y, s){\n        return x + Math.ceil(Math.random() * (y-x)) + s\n    }\n\n    componentDidUpdate() {\n        var textArea\n        if(this.state.editing) {\n            textArea = this._newText\n            textArea.focus()\n            textArea.select()\n        }\n    } \n\n    shouldComponentUpdate(nextProps, nextState) {\n        return(\n            this.props.children !== nextProps.children || this.state !== nextState\n        )\n    }\n\n    edit() {  \n       this.setState({\n           editing: true\n       })\n    }\n    remove() {\n       this.props.onRemove(this.props.index)\n    }\n    save(e) {\n        e.preventDefault()\n        this.props.onChange(this._newText.value, this.props.index)\n        this.setState({\n            editing: false\n        })\n    }\n\n    renderForm() {\n        return(\n            <div className= \"note\" style= {this.style}>\n                <form onSubmit={this.save}>\n                    <textarea  ref = { input => this._newText = input } \n                    autofocus= \"true\"\n                    defaultValue= {this.props.children}/>\n                    <button id= \"save\" onClick= {this.save}><FaFile /></button>\n                </form>\n            </div>\n        )\n    }\n    renderDisplay() {\n        return (\n            <div className = \"note\" style= {this.style}>\n               <p>{this.props.children}</p>\n                <span>\n                    <button id= \"edit\" onClick= {this.edit} >    <FaPen />    </button>\n                    <button id= \"remove\" onClick= {this.remove} >    <FaTrash /> </button>\n                </span>\n            </div>\n        )\n    }\n\n    render() {\n       return this.state.editing ? this.renderForm() : this.renderDisplay()\n    }\n}\nexport default Note","import React, { Component } from 'react'\nimport Note from './Note'\nimport { FaPlus } from 'react-icons/fa';\n\nclass Board extends Component {\n    constructor(props ) {\n        super(props)\n        this.state = {\n            notes : []\n        }\n        this.eachNote = this.eachNote.bind(this)\n        this.update = this.update.bind(this)\n        this.remove = this.remove.bind(this)\n        this.add = this.add.bind(this)\n        this.nextId = this.nextId.bind(this)\n    }\n\n\tcomponentWillMount() {\n\t\tvar self = this\n\t\tif(this.props.count) {\n\t\t\tfetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(json => json[0]\n\t\t\t\t\t\t\t\t.split('. ')\n\t\t\t\t\t\t\t\t.forEach(sentence => self.add(sentence.substring(0, 25))))\n\t\t}\n\t}\n\n    add(text) {\n        this.setState(prevState => ({\n            notes: [ \n                ...prevState.notes,\n                {\n                    id: this.nextId(),\n                    note: text\n                }\n            ]\n        }))\n    }\n\n    nextId() {\n        this.uniqueId = this.uniqueId || 0\n        return this.uniqueId++\n    }\n\n    update(newText, i) {\n        console.log('updating item at index', i , newText)\n        this.setState(prevState => ({\n            notes: prevState.notes.map(\n                note => (note.id !== i) ? note : {...note, note: newText}\n            )\n        }))\n    }\n    \n    remove(id) {\n        console.log('removing item', id)\n        this.setState(prevState => ({\n            notes: prevState.notes.filter(note => note.id !== id)\n        }))\n    }\n\n    eachNote(note, i) {\n        return (\n            <Note key= {note.id}\n                index= {note.id}\n                onChange = {this.update}\n                onRemove= {this.remove}>\n                {note.note}\n                </Note>\n        )\n\n    }\n\n    render() {\n        return(\n            <div className=\"board\">\n                {this.state.notes.map(this.eachNote)}\n                <button onClick={this.add.bind(null, \"New Note\", )} id=\"add\">\n                <FaPlus />\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Board","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board count={50}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}